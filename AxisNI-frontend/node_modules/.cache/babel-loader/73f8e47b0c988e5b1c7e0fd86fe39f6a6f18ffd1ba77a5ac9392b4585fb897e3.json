{"ast":null,"code":"var _jsxFileName = \"C:\\\\Denis_Dev\\\\AxisNI\\\\AxisNI-frontend\\\\src\\\\components\\\\FileUploader.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { uploadExcel, uploadCsv, getSheetNames } from \"../services/api\";\nimport ChartCreator from \"./ChartCreator\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FileUploader() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [sheetNames, setSheetNames] = useState([]);\n  const [selectedSheetIndex, setSelectedSheetIndex] = useState(0);\n  const [range, setRange] = useState(\"A1:B10\");\n  const [data, setData] = useState(null);\n  const [fileType, setFileType] = useState(\"excel\");\n  const handleFileChange = async e => {\n    const newFile = e.target.files[0];\n    setFile(newFile);\n    setData(null);\n    setSheetNames([]);\n    setSelectedSheetIndex(0);\n    if (fileType === \"excel\") {\n      try {\n        const res = await getSheetNames(newFile);\n        setSheetNames(res.data.sheets);\n        setSelectedSheetIndex(0);\n      } catch (err) {\n        alert(\"Failed to get sheet names\");\n      }\n    }\n  };\n  const handleUpload = async () => {\n    if (!file) return;\n    try {\n      let res;\n      if (fileType === \"excel\") {\n        res = await uploadExcel(file, selectedSheetIndex, range);\n      } else {\n        res = await uploadCsv(file);\n      }\n      setData(res.data);\n    } catch (err) {\n      alert(\"Upload failed\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload Data File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: fileType,\n      onChange: e => setFileType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"excel\",\n        children: \"Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"csv\",\n        children: \"CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), fileType === \"excel\" && sheetNames.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Sheet:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedSheetIndex,\n        onChange: e => setSelectedSheetIndex(Number(e.target.value)),\n        children: sheetNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: range,\n        onChange: e => setRange(e.target.value),\n        placeholder: \"Range (e.g., A1:B10)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload & Preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), data && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Data Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        cellPadding: 5,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: key\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: data.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.values(row).map((val, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: val\n            }, j, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 21\n            }, this))\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChartCreator, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUploader, \"ETSg6GhP7qcRxNxS++NKCxMKpxU=\");\n_c = FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","useState","uploadExcel","uploadCsv","getSheetNames","ChartCreator","jsxDEV","_jsxDEV","Fragment","_Fragment","FileUploader","_s","file","setFile","sheetNames","setSheetNames","selectedSheetIndex","setSelectedSheetIndex","range","setRange","data","setData","fileType","setFileType","handleFileChange","e","newFile","target","files","res","sheets","err","alert","handleUpload","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","value","length","Number","map","name","index","placeholder","onClick","border","cellPadding","Object","keys","key","row","i","values","val","j","_c","$RefreshReg$"],"sources":["C:/Denis_Dev/AxisNI/AxisNI-frontend/src/components/FileUploader.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { uploadExcel, uploadCsv, getSheetNames } from \"../services/api\";\r\nimport ChartCreator from \"./ChartCreator\";\r\n\r\nexport default function FileUploader() {\r\n  const [file, setFile] = useState(null);\r\n  const [sheetNames, setSheetNames] = useState([]);\r\n  const [selectedSheetIndex, setSelectedSheetIndex] = useState(0);\r\n  const [range, setRange] = useState(\"A1:B10\");\r\n  const [data, setData] = useState(null);\r\n  const [fileType, setFileType] = useState(\"excel\");\r\n\r\n  const handleFileChange = async (e) => {\r\n    const newFile = e.target.files[0];\r\n    setFile(newFile);\r\n    setData(null);\r\n    setSheetNames([]);\r\n    setSelectedSheetIndex(0);\r\n    if (fileType === \"excel\") {\r\n      try {\r\n        const res = await getSheetNames(newFile);\r\n        setSheetNames(res.data.sheets);\r\n        setSelectedSheetIndex(0);\r\n      } catch (err) {\r\n        alert(\"Failed to get sheet names\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) return;\r\n    try {\r\n      let res;\r\n      if (fileType === \"excel\") {\r\n        res = await uploadExcel(file, selectedSheetIndex, range);\r\n      } else {\r\n        res = await uploadCsv(file);\r\n      }\r\n      setData(res.data);\r\n    } catch (err) {\r\n      alert(\"Upload failed\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Upload Data File</h3>\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <select value={fileType} onChange={(e) => setFileType(e.target.value)}>\r\n        <option value=\"excel\">Excel</option>\r\n        <option value=\"csv\">CSV</option>\r\n      </select>\r\n\r\n      {fileType === \"excel\" && sheetNames.length > 0 && (\r\n        <>\r\n          <label>Sheet:</label>\r\n          <select\r\n            value={selectedSheetIndex}\r\n            onChange={(e) => setSelectedSheetIndex(Number(e.target.value))}\r\n          >\r\n            {sheetNames.map((name, index) => (\r\n              <option key={index} value={index}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <input\r\n            type=\"text\"\r\n            value={range}\r\n            onChange={(e) => setRange(e.target.value)}\r\n            placeholder=\"Range (e.g., A1:B10)\"\r\n          />\r\n        </>\r\n      )}\r\n\r\n      <button onClick={handleUpload}>Upload & Preview</button>\r\n\r\n      {data && (\r\n        <>\r\n          <h4>Data Preview</h4>\r\n          <table border=\"1\" cellPadding={5}>\r\n            <thead>\r\n              <tr>\r\n                {Object.keys(data[0]).map((key) => (\r\n                  <th key={key}>{key}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.map((row, i) => (\r\n                <tr key={i}>\r\n                  {Object.values(row).map((val, j) => (\r\n                    <td key={j}>{val}</td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <ChartCreator data={data} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}