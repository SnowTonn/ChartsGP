{"ast":null,"code":"var _jsxFileName = \"C:\\\\Denis_Dev\\\\AxisNI\\\\AxisNI-frontend\\\\src\\\\components\\\\FileUploader.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { uploadExcel, uploadCsv, getSheetNames } from \"../services/api\";\nimport ChartCreator from \"./ChartCreator\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FileUploader() {\n  _s();\n  const [fileEntries, setFileEntries] = useState([]);\n  const [mergedData, setMergedData] = useState([]);\n  const [showDataPreview, setShowDataPreview] = useState(false);\n\n  // Array of chart configs: { id, title, xKey, yKey, drilldownKeys }\n  const [charts, setCharts] = useState([]);\n  const handleFilesChange = async e => {\n    const selectedFiles = Array.from(e.target.files);\n    const newEntries = [];\n    for (const file of selectedFiles) {\n      const ext = file.name.split(\".\").pop().toLowerCase();\n      const fileType = ext === \"csv\" ? \"csv\" : \"excel\";\n      let sheetNames = [];\n      if (fileType === \"excel\") {\n        try {\n          const res = await getSheetNames(file);\n          sheetNames = res.data.sheets || [];\n        } catch {\n          alert(`Failed to get sheet names for ${file.name}`);\n        }\n      }\n      newEntries.push({\n        file,\n        fileType,\n        sheetIndex: 0,\n        range: \"A1:Z50\",\n        sheetNames\n      });\n    }\n    setFileEntries(newEntries);\n    setMergedData([]);\n    setCharts([]); // reset charts\n  };\n  const updateEntry = (index, field, value) => {\n    setFileEntries(prev => {\n      const updated = [...prev];\n      updated[index][field] = value;\n      return updated;\n    });\n  };\n  const handleUpload = async () => {\n    const datasets = [];\n    for (let i = 0; i < fileEntries.length; i++) {\n      const {\n        file,\n        fileType,\n        sheetIndex,\n        range\n      } = fileEntries[i];\n      try {\n        const res = fileType === \"excel\" ? await uploadExcel(file, sheetIndex, range) : await uploadCsv(file);\n        const data = res.data;\n        if (Array.isArray(data)) {\n          // Prefix columns to avoid collisions\n          const prefixed = data.map(row => {\n            const newRow = {};\n            for (const [key, value] of Object.entries(row)) {\n              newRow[`F${i + 1}_${key}`] = value;\n            }\n            return newRow;\n          });\n          datasets.push(prefixed);\n        }\n      } catch {\n        alert(`Upload failed for ${file.name}`);\n      }\n    }\n\n    // Merge datasets horizontally by row index\n    const maxRows = Math.max(...datasets.map(d => d.length));\n    const merged = [];\n    for (let i = 0; i < maxRows; i++) {\n      const row = {};\n      for (const dataset of datasets) {\n        const currentRow = dataset[i] || {};\n        Object.assign(row, currentRow);\n      }\n      merged.push(row);\n    }\n    setMergedData(merged);\n    setShowDataPreview(true);\n\n    // Initialize with 1 empty chart config\n    setCharts([{\n      id: 1,\n      title: \"Chart 1\",\n      xKey: \"\",\n      yKey: \"\",\n      drilldownKeys: []\n    }]);\n  };\n\n  // Add a new blank chart config\n  const addChart = () => {\n    setCharts(prev => [...prev, {\n      id: prev.length + 1,\n      title: `Chart ${prev.length + 1}`,\n      xKey: \"\",\n      yKey: \"\",\n      drilldownKeys: []\n    }]);\n  };\n\n  // Remove chart by id\n  const removeChart = id => {\n    setCharts(prev => prev.filter(c => c.id !== id));\n  };\n\n  // Update chart config\n  const updateChart = (id, newConfig) => {\n    setCharts(prev => prev.map(c => c.id === id ? {\n      ...c,\n      ...newConfig\n    } : c));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"1rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload and Combine Data (Side-by-Side)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: handleFilesChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), fileEntries.map((entry, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid #ccc\",\n        padding: 10,\n        marginTop: 10,\n        borderRadius: 6\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: entry.file.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"File Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: entry.fileType,\n          onChange: e => updateEntry(idx, \"fileType\", e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"excel\",\n            children: \"Excel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"csv\",\n            children: \"CSV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), entry.fileType === \"excel\" && entry.sheetNames.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Sheet:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: entry.sheetIndex,\n            onChange: e => updateEntry(idx, \"sheetIndex\", Number(e.target.value)),\n            children: entry.sheetNames.map((name, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: i,\n              children: name\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Range:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: entry.range,\n            onChange: e => updateEntry(idx, \"range\", e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)), fileEntries.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload and Merge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this), mergedData.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 16\n        },\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showDataPreview,\n            onChange: () => setShowDataPreview(prev => !prev)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), \" \", \"Show Merged Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), showDataPreview && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          overflowX: \"auto\",\n          marginTop: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          border: \"1\",\n          cellPadding: 5,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.keys(mergedData[0] || {}).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: key\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: mergedData.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.values(row).map((val, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: val\n              }, j, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 25\n              }, this))\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Charts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addChart,\n          children: \"+ Add Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), charts.map(({\n          id,\n          title,\n          xKey,\n          yKey,\n          drilldownKeys\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            border: \"1px solid #999\",\n            padding: 10,\n            marginTop: 12,\n            borderRadius: 6,\n            background: \"#fafafa\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              float: \"right\",\n              cursor: \"pointer\"\n            },\n            onClick: () => removeChart(id),\n            title: \"Remove chart\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ChartCreator, {\n            data: mergedData,\n            onSave: newTitle => updateChart(id, {\n              title: newTitle\n            }),\n            chartTypeInitial: \"column\",\n            titleInitial: title,\n            xKeyInitial: xKey,\n            yKeyInitial: yKey,\n            drilldownKeysInitial: drilldownKeys,\n            onChange: newConfig => updateChart(id, newConfig)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 17\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUploader, \"oXAGLVJcqF+mJgSyFp7NQJHj02I=\");\n_c = FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","useState","uploadExcel","uploadCsv","getSheetNames","ChartCreator","jsxDEV","_jsxDEV","Fragment","_Fragment","FileUploader","_s","fileEntries","setFileEntries","mergedData","setMergedData","showDataPreview","setShowDataPreview","charts","setCharts","handleFilesChange","e","selectedFiles","Array","from","target","files","newEntries","file","ext","name","split","pop","toLowerCase","fileType","sheetNames","res","data","sheets","alert","push","sheetIndex","range","updateEntry","index","field","value","prev","updated","handleUpload","datasets","i","length","isArray","prefixed","map","row","newRow","key","Object","entries","maxRows","Math","max","d","merged","dataset","currentRow","assign","id","title","xKey","yKey","drilldownKeys","addChart","removeChart","filter","c","updateChart","newConfig","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","entry","idx","border","marginTop","borderRadius","Number","onClick","checked","overflowX","cellPadding","keys","values","val","j","background","float","cursor","onSave","newTitle","chartTypeInitial","titleInitial","xKeyInitial","yKeyInitial","drilldownKeysInitial","_c","$RefreshReg$"],"sources":["C:/Denis_Dev/AxisNI/AxisNI-frontend/src/components/FileUploader.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { uploadExcel, uploadCsv, getSheetNames } from \"../services/api\";\r\nimport ChartCreator from \"./ChartCreator\";\r\n\r\nexport default function FileUploader() {\r\n  const [fileEntries, setFileEntries] = useState([]);\r\n  const [mergedData, setMergedData] = useState([]);\r\n  const [showDataPreview, setShowDataPreview] = useState(false);\r\n\r\n  // Array of chart configs: { id, title, xKey, yKey, drilldownKeys }\r\n  const [charts, setCharts] = useState([]);\r\n\r\n  const handleFilesChange = async (e) => {\r\n    const selectedFiles = Array.from(e.target.files);\r\n    const newEntries = [];\r\n\r\n    for (const file of selectedFiles) {\r\n      const ext = file.name.split(\".\").pop().toLowerCase();\r\n      const fileType = ext === \"csv\" ? \"csv\" : \"excel\";\r\n      let sheetNames = [];\r\n\r\n      if (fileType === \"excel\") {\r\n        try {\r\n          const res = await getSheetNames(file);\r\n          sheetNames = res.data.sheets || [];\r\n        } catch {\r\n          alert(`Failed to get sheet names for ${file.name}`);\r\n        }\r\n      }\r\n\r\n      newEntries.push({\r\n        file,\r\n        fileType,\r\n        sheetIndex: 0,\r\n        range: \"A1:Z50\",\r\n        sheetNames,\r\n      });\r\n    }\r\n\r\n    setFileEntries(newEntries);\r\n    setMergedData([]);\r\n    setCharts([]); // reset charts\r\n  };\r\n\r\n  const updateEntry = (index, field, value) => {\r\n    setFileEntries((prev) => {\r\n      const updated = [...prev];\r\n      updated[index][field] = value;\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    const datasets = [];\r\n\r\n    for (let i = 0; i < fileEntries.length; i++) {\r\n      const { file, fileType, sheetIndex, range } = fileEntries[i];\r\n      try {\r\n        const res =\r\n          fileType === \"excel\"\r\n            ? await uploadExcel(file, sheetIndex, range)\r\n            : await uploadCsv(file);\r\n\r\n        const data = res.data;\r\n\r\n        if (Array.isArray(data)) {\r\n          // Prefix columns to avoid collisions\r\n          const prefixed = data.map((row) => {\r\n            const newRow = {};\r\n            for (const [key, value] of Object.entries(row)) {\r\n              newRow[`F${i + 1}_${key}`] = value;\r\n            }\r\n            return newRow;\r\n          });\r\n          datasets.push(prefixed);\r\n        }\r\n      } catch {\r\n        alert(`Upload failed for ${file.name}`);\r\n      }\r\n    }\r\n\r\n    // Merge datasets horizontally by row index\r\n    const maxRows = Math.max(...datasets.map((d) => d.length));\r\n    const merged = [];\r\n\r\n    for (let i = 0; i < maxRows; i++) {\r\n      const row = {};\r\n      for (const dataset of datasets) {\r\n        const currentRow = dataset[i] || {};\r\n        Object.assign(row, currentRow);\r\n      }\r\n      merged.push(row);\r\n    }\r\n\r\n    setMergedData(merged);\r\n    setShowDataPreview(true);\r\n\r\n    // Initialize with 1 empty chart config\r\n    setCharts([{ id: 1, title: \"Chart 1\", xKey: \"\", yKey: \"\", drilldownKeys: [] }]);\r\n  };\r\n\r\n  // Add a new blank chart config\r\n  const addChart = () => {\r\n    setCharts((prev) => [\r\n      ...prev,\r\n      { id: prev.length + 1, title: `Chart ${prev.length + 1}`, xKey: \"\", yKey: \"\", drilldownKeys: [] },\r\n    ]);\r\n  };\r\n\r\n  // Remove chart by id\r\n  const removeChart = (id) => {\r\n    setCharts((prev) => prev.filter((c) => c.id !== id));\r\n  };\r\n\r\n  // Update chart config\r\n  const updateChart = (id, newConfig) => {\r\n    setCharts((prev) =>\r\n      prev.map((c) => (c.id === id ? { ...c, ...newConfig } : c))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"1rem\" }}>\r\n      <h3>Upload and Combine Data (Side-by-Side)</h3>\r\n\r\n      <input type=\"file\" multiple onChange={handleFilesChange} />\r\n\r\n      {fileEntries.map((entry, idx) => (\r\n        <div\r\n          key={idx}\r\n          style={{\r\n            border: \"1px solid #ccc\",\r\n            padding: 10,\r\n            marginTop: 10,\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          <strong>{entry.file.name}</strong>\r\n          <div>\r\n            <label>File Type:</label>\r\n            <select\r\n              value={entry.fileType}\r\n              onChange={(e) => updateEntry(idx, \"fileType\", e.target.value)}\r\n            >\r\n              <option value=\"excel\">Excel</option>\r\n              <option value=\"csv\">CSV</option>\r\n            </select>\r\n          </div>\r\n\r\n          {entry.fileType === \"excel\" && entry.sheetNames.length > 0 && (\r\n            <>\r\n              <div>\r\n                <label>Sheet:</label>\r\n                <select\r\n                  value={entry.sheetIndex}\r\n                  onChange={(e) =>\r\n                    updateEntry(idx, \"sheetIndex\", Number(e.target.value))\r\n                  }\r\n                >\r\n                  {entry.sheetNames.map((name, i) => (\r\n                    <option key={i} value={i}>\r\n                      {name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label>Range:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={entry.range}\r\n                  onChange={(e) => updateEntry(idx, \"range\", e.target.value)}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      {fileEntries.length > 0 && (\r\n        <div style={{ marginTop: 16 }}>\r\n          <button onClick={handleUpload}>Upload and Merge</button>\r\n        </div>\r\n      )}\r\n\r\n      {mergedData.length > 0 && (\r\n        <>\r\n          <div style={{ marginTop: 16 }}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={showDataPreview}\r\n                onChange={() => setShowDataPreview((prev) => !prev)}\r\n              />{\" \"}\r\n              Show Merged Data\r\n            </label>\r\n          </div>\r\n\r\n          {showDataPreview && (\r\n            <div style={{ overflowX: \"auto\", marginTop: 8 }}>\r\n              <table border=\"1\" cellPadding={5}>\r\n                <thead>\r\n                  <tr>\r\n                    {Object.keys(mergedData[0] || {}).map((key) => (\r\n                      <th key={key}>{key}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {mergedData.map((row, i) => (\r\n                    <tr key={i}>\r\n                      {Object.values(row).map((val, j) => (\r\n                        <td key={j}>{val}</td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n\r\n          <div style={{ marginTop: 20 }}>\r\n            <h3>Charts</h3>\r\n            <button onClick={addChart}>+ Add Chart</button>\r\n\r\n            {charts.map(({ id, title, xKey, yKey, drilldownKeys }) => (\r\n              <div\r\n                key={id}\r\n                style={{\r\n                  border: \"1px solid #999\",\r\n                  padding: 10,\r\n                  marginTop: 12,\r\n                  borderRadius: 6,\r\n                  background: \"#fafafa\",\r\n                }}\r\n              >\r\n                <button\r\n                  style={{ float: \"right\", cursor: \"pointer\" }}\r\n                  onClick={() => removeChart(id)}\r\n                  title=\"Remove chart\"\r\n                >\r\n                  &times;\r\n                </button>\r\n\r\n                <ChartCreator\r\n                  data={mergedData}\r\n                  onSave={(newTitle) => updateChart(id, { title: newTitle })}\r\n                  chartTypeInitial=\"column\"\r\n                  titleInitial={title}\r\n                  xKeyInitial={xKey}\r\n                  yKeyInitial={yKey}\r\n                  drilldownKeysInitial={drilldownKeys}\r\n                  onChange={(newConfig) => updateChart(id, newConfig)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}