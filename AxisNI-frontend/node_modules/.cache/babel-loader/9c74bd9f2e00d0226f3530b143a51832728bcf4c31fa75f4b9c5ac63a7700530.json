{"ast":null,"code":"// frontend-react/src/services/api.js\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api\";\n\n// Upload Excel file with sheet index and range\nexport const uploadExcel = async (file, sheet, range) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"sheet\", sheet);\n  formData.append(\"range\", range);\n  try {\n    const res = await axios.post(`${API_URL}/upload/excel`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    console.log(\"Excel upload response:\", res);\n    return res;\n  } catch (err) {\n    console.error(\"Excel upload error:\", err);\n    throw err;\n  }\n};\n\n// Upload CSV file\nexport const uploadCsv = async file => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    const res = await axios.post(`${API_URL}/upload/csv`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    console.log(\"CSV upload response:\", res);\n    return res;\n  } catch (err) {\n    console.error(\"CSV upload error:\", err);\n    throw err;\n  }\n};\n\n// Save chart data (name + JSON config)\nexport const saveChart = async (name, configJson) => {\n  try {\n    const res = await axios.post(`${API_URL}/chart/save`, {\n      name,\n      configJson\n    });\n    console.log(\"Save chart response:\", res);\n    return res;\n  } catch (err) {\n    console.error(\"Save chart error:\", err);\n    throw err;\n  }\n};\n\n// Get all saved charts\nexport const getCharts = async () => {\n  try {\n    const res = await axios.get(`${API_URL}/chart/all`);\n    console.log(\"Get charts response:\", res);\n    return res;\n  } catch (err) {\n    console.error(\"Get charts error:\", err);\n    throw err;\n  }\n};","map":{"version":3,"names":["axios","API_URL","uploadExcel","file","sheet","range","formData","FormData","append","res","post","headers","console","log","err","error","uploadCsv","saveChart","name","configJson","getCharts","get"],"sources":["C:/Denis_Dev/AxisNI/AxisNI-frontend/src/services/api.js"],"sourcesContent":["// frontend-react/src/services/api.js\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080/api\";\r\n\r\n// Upload Excel file with sheet index and range\r\nexport const uploadExcel = async (file, sheet, range) => {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  formData.append(\"sheet\", sheet);\r\n  formData.append(\"range\", range);\r\n\r\n  try {\r\n    const res = await axios.post(`${API_URL}/upload/excel`, formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    });\r\n    console.log(\"Excel upload response:\", res);\r\n    return res;\r\n  } catch (err) {\r\n    console.error(\"Excel upload error:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Upload CSV file\r\nexport const uploadCsv = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  try {\r\n    const res = await axios.post(`${API_URL}/upload/csv`, formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    });\r\n    console.log(\"CSV upload response:\", res);\r\n    return res;\r\n  } catch (err) {\r\n    console.error(\"CSV upload error:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Save chart data (name + JSON config)\r\nexport const saveChart = async (name, configJson) => {\r\n  try {\r\n    const res = await axios.post(`${API_URL}/chart/save`, { name, configJson });\r\n    console.log(\"Save chart response:\", res);\r\n    return res;\r\n  } catch (err) {\r\n    console.error(\"Save chart error:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Get all saved charts\r\nexport const getCharts = async () => {\r\n  try {\r\n    const res = await axios.get(`${API_URL}/chart/all`);\r\n    console.log(\"Get charts response:\", res);\r\n    return res;\r\n  } catch (err) {\r\n    console.error(\"Get charts error:\", err);\r\n    throw err;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACvD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAAC;EAC7BG,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAAC;EAC/BE,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,CAAC;EAE/B,IAAI;IACF,MAAMI,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,eAAe,EAAEK,QAAQ,EAAE;MAChEK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB;IACnD,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEJ,GAAG,CAAC;IAC1C,OAAOA,GAAG;EACZ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAAC;IACzC,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAME,SAAS,GAAG,MAAOb,IAAI,IAAK;EACvC,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMM,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,aAAa,EAAEK,QAAQ,EAAE;MAC9DK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB;IACnD,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,GAAG,CAAC;IACxC,OAAOA,GAAG;EACZ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAAC;IACvC,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,SAAS,GAAG,MAAAA,CAAOC,IAAI,EAAEC,UAAU,KAAK;EACnD,IAAI;IACF,MAAMV,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,aAAa,EAAE;MAAEiB,IAAI;MAAEC;IAAW,CAAC,CAAC;IAC3EP,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,GAAG,CAAC;IACxC,OAAOA,GAAG;EACZ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAAC;IACvC,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMX,GAAG,GAAG,MAAMT,KAAK,CAACqB,GAAG,CAAC,GAAGpB,OAAO,YAAY,CAAC;IACnDW,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,GAAG,CAAC;IACxC,OAAOA,GAAG;EACZ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAAC;IACvC,MAAMA,GAAG;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}