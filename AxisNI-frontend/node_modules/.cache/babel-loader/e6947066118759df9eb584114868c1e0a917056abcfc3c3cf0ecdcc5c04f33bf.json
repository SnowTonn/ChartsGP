{"ast":null,"code":"var _jsxFileName = \"C:\\\\Denis_Dev\\\\AxisNI\\\\AxisNI-frontend\\\\src\\\\components\\\\FileUploader.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { uploadExcel, uploadCsv, getSheetNames } from \"../services/api\";\nimport ChartCreator from \"./ChartCreator\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FileUploader() {\n  _s();\n  const [fileEntries, setFileEntries] = useState([]);\n  const [mergedData, setMergedData] = useState([]);\n  const [showDataPreview, setShowDataPreview] = useState(false);\n  const [charts, setCharts] = useState([]);\n  const handleFilesChange = async e => {\n    const selectedFiles = Array.from(e.target.files);\n    const newEntries = [];\n    for (const file of selectedFiles) {\n      const ext = file.name.split(\".\").pop().toLowerCase();\n      const fileType = ext === \"csv\" ? \"csv\" : \"excel\";\n      let sheetNames = [];\n      if (fileType === \"excel\") {\n        try {\n          const res = await getSheetNames(file);\n          sheetNames = res.data.sheets || [];\n        } catch {\n          alert(`Failed to get sheet names for ${file.name}`);\n        }\n      }\n      newEntries.push({\n        file,\n        fileType,\n        sheetIndex: 0,\n        range: \"A3:H19\",\n        sheetNames\n      });\n    }\n    setFileEntries(newEntries);\n    setMergedData([]);\n    setCharts([]);\n  };\n  const updateEntry = (index, field, value) => {\n    setFileEntries(prev => {\n      const updated = [...prev];\n      updated[index][field] = value;\n      return updated;\n    });\n  };\n  const handleUpload = async () => {\n    const datasets = [];\n    for (let i = 0; i < fileEntries.length; i++) {\n      const {\n        file,\n        fileType,\n        sheetIndex,\n        range\n      } = fileEntries[i];\n      try {\n        const res = fileType === \"excel\" ? await uploadExcel(file, sheetIndex, range) : await uploadCsv(file);\n        const data = res.data;\n        if (Array.isArray(data)) {\n          const prefixed = data.map(row => {\n            const newRow = {};\n            for (const [key, value] of Object.entries(row)) {\n              newRow[`F${i + 1}_${key}`] = value;\n            }\n            return newRow;\n          });\n          datasets.push(prefixed);\n        }\n      } catch {\n        alert(`Upload failed for ${file.name}`);\n      }\n    }\n    const maxRows = Math.max(...datasets.map(d => d.length));\n    const merged = [];\n    for (let i = 0; i < maxRows; i++) {\n      const row = {};\n      for (const dataset of datasets) {\n        const currentRow = dataset[i] || {};\n        Object.assign(row, currentRow);\n      }\n      merged.push(row);\n    }\n    setMergedData(merged);\n    setShowDataPreview(true);\n    setCharts([{\n      id: 1,\n      title: \"Chart 1\",\n      xKey: \"\",\n      yKey: \"\",\n      drilldownKeys: []\n    }]);\n  };\n  const addChart = () => {\n    setCharts(prev => [...prev, {\n      id: prev.length + 1,\n      title: `Chart ${prev.length + 1}`,\n      xKey: \"\",\n      yKey: \"\",\n      drilldownKeys: []\n    }]);\n  };\n  const removeChart = id => {\n    setCharts(prev => prev.filter(c => c.id !== id));\n  };\n  const updateChart = (id, newConfig) => {\n    setCharts(prev => prev.map(c => c.id === id ? {\n      ...c,\n      ...newConfig\n    } : c));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"2rem\",\n      maxWidth: 1200,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: \"1rem\"\n      },\n      children: \"Upload and Combine Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: handleFilesChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        gap: \"1rem\",\n        marginTop: \"1rem\"\n      },\n      children: fileEntries.map((entry, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: \"1 1 300px\",\n          border: \"1px solid #ccc\",\n          borderRadius: 8,\n          padding: \"1rem\",\n          background: \"#f9f9f9\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: entry.file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"0.5rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"File Type: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: entry.fileType,\n            onChange: e => updateEntry(idx, \"fileType\", e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"excel\",\n              children: \"Excel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"csv\",\n              children: \"CSV\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), entry.fileType === \"excel\" && entry.sheetNames.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: \"0.5rem\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Sheet: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: entry.sheetIndex,\n              onChange: e => updateEntry(idx, \"sheetIndex\", Number(e.target.value)),\n              children: entry.sheetNames.map((name, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: i,\n                children: name\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: \"0.5rem\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Range: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: entry.range,\n              onChange: e => updateEntry(idx, \"range\", e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), fileEntries.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      style: {\n        marginTop: \"1rem\",\n        padding: \"0.5rem 1rem\"\n      },\n      children: \"Upload and Merge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), mergedData.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"1.5rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showDataPreview,\n            onChange: () => setShowDataPreview(prev => !prev)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), \"\\xA0Show Merged Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), showDataPreview && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          overflowX: \"auto\",\n          marginTop: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          border: \"1\",\n          cellPadding: 5,\n          style: {\n            borderCollapse: \"collapse\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: {\n              background: \"#eee\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.keys(mergedData[0] || {}).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: key\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: mergedData.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.values(row).map((val, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: val\n              }, j, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 25\n              }, this))\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"2rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Charts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addChart,\n          style: {\n            marginBottom: \"1rem\"\n          },\n          children: \"+ Add Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            gap: \"1rem\"\n          },\n          children: charts.map(({\n            id,\n            title,\n            xKey,\n            yKey,\n            drilldownKeys\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: \"1 1 350px\",\n              border: \"1px solid #ccc\",\n              borderRadius: 8,\n              padding: \"1rem\",\n              background: \"#fff\",\n              position: \"relative\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeChart(id),\n              style: {\n                position: \"absolute\",\n                top: 8,\n                right: 8,\n                background: \"transparent\",\n                border: \"none\",\n                fontSize: \"1.5rem\",\n                cursor: \"pointer\"\n              },\n              title: \"Remove chart\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ChartCreator, {\n              data: mergedData,\n              onSave: newTitle => updateChart(id, {\n                title: newTitle\n              }),\n              chartTypeInitial: \"column\",\n              titleInitial: title,\n              xKeyInitial: xKey,\n              yKeyInitial: yKey,\n              drilldownKeysInitial: drilldownKeys,\n              onChange: newConfig => updateChart(id, newConfig)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 19\n            }, this)]\n          }, id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUploader, \"oXAGLVJcqF+mJgSyFp7NQJHj02I=\");\n_c = FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","useState","uploadExcel","uploadCsv","getSheetNames","ChartCreator","jsxDEV","_jsxDEV","Fragment","_Fragment","FileUploader","_s","fileEntries","setFileEntries","mergedData","setMergedData","showDataPreview","setShowDataPreview","charts","setCharts","handleFilesChange","e","selectedFiles","Array","from","target","files","newEntries","file","ext","name","split","pop","toLowerCase","fileType","sheetNames","res","data","sheets","alert","push","sheetIndex","range","updateEntry","index","field","value","prev","updated","handleUpload","datasets","i","length","isArray","prefixed","map","row","newRow","key","Object","entries","maxRows","Math","max","d","merged","dataset","currentRow","assign","id","title","xKey","yKey","drilldownKeys","addChart","removeChart","filter","c","updateChart","newConfig","style","padding","maxWidth","margin","children","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","display","flexWrap","gap","marginTop","entry","idx","flex","border","borderRadius","background","Number","onClick","checked","overflowX","cellPadding","borderCollapse","width","keys","values","val","j","position","top","right","fontSize","cursor","onSave","newTitle","chartTypeInitial","titleInitial","xKeyInitial","yKeyInitial","drilldownKeysInitial","_c","$RefreshReg$"],"sources":["C:/Denis_Dev/AxisNI/AxisNI-frontend/src/components/FileUploader.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { uploadExcel, uploadCsv, getSheetNames } from \"../services/api\";\r\nimport ChartCreator from \"./ChartCreator\";\r\n\r\nexport default function FileUploader() {\r\n  const [fileEntries, setFileEntries] = useState([]);\r\n  const [mergedData, setMergedData] = useState([]);\r\n  const [showDataPreview, setShowDataPreview] = useState(false);\r\n  const [charts, setCharts] = useState([]);\r\n\r\n  const handleFilesChange = async (e) => {\r\n    const selectedFiles = Array.from(e.target.files);\r\n    const newEntries = [];\r\n\r\n    for (const file of selectedFiles) {\r\n      const ext = file.name.split(\".\").pop().toLowerCase();\r\n      const fileType = ext === \"csv\" ? \"csv\" : \"excel\";\r\n      let sheetNames = [];\r\n\r\n      if (fileType === \"excel\") {\r\n        try {\r\n          const res = await getSheetNames(file);\r\n          sheetNames = res.data.sheets || [];\r\n        } catch {\r\n          alert(`Failed to get sheet names for ${file.name}`);\r\n        }\r\n      }\r\n\r\n      newEntries.push({\r\n        file,\r\n        fileType,\r\n        sheetIndex: 0,\r\n        range: \"A3:H19\",\r\n        sheetNames,\r\n      });\r\n    }\r\n\r\n    setFileEntries(newEntries);\r\n    setMergedData([]);\r\n    setCharts([]);\r\n  };\r\n\r\n  const updateEntry = (index, field, value) => {\r\n    setFileEntries((prev) => {\r\n      const updated = [...prev];\r\n      updated[index][field] = value;\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    const datasets = [];\r\n\r\n    for (let i = 0; i < fileEntries.length; i++) {\r\n      const { file, fileType, sheetIndex, range } = fileEntries[i];\r\n      try {\r\n        const res =\r\n          fileType === \"excel\"\r\n            ? await uploadExcel(file, sheetIndex, range)\r\n            : await uploadCsv(file);\r\n\r\n        const data = res.data;\r\n\r\n        if (Array.isArray(data)) {\r\n          const prefixed = data.map((row) => {\r\n            const newRow = {};\r\n            for (const [key, value] of Object.entries(row)) {\r\n              newRow[`F${i + 1}_${key}`] = value;\r\n            }\r\n            return newRow;\r\n          });\r\n          datasets.push(prefixed);\r\n        }\r\n      } catch {\r\n        alert(`Upload failed for ${file.name}`);\r\n      }\r\n    }\r\n\r\n    const maxRows = Math.max(...datasets.map((d) => d.length));\r\n    const merged = [];\r\n\r\n    for (let i = 0; i < maxRows; i++) {\r\n      const row = {};\r\n      for (const dataset of datasets) {\r\n        const currentRow = dataset[i] || {};\r\n        Object.assign(row, currentRow);\r\n      }\r\n      merged.push(row);\r\n    }\r\n\r\n    setMergedData(merged);\r\n    setShowDataPreview(true);\r\n    setCharts([{ id: 1, title: \"Chart 1\", xKey: \"\", yKey: \"\", drilldownKeys: [] }]);\r\n  };\r\n\r\n  const addChart = () => {\r\n    setCharts((prev) => [\r\n      ...prev,\r\n      { id: prev.length + 1, title: `Chart ${prev.length + 1}`, xKey: \"\", yKey: \"\", drilldownKeys: [] },\r\n    ]);\r\n  };\r\n\r\n  const removeChart = (id) => {\r\n    setCharts((prev) => prev.filter((c) => c.id !== id));\r\n  };\r\n\r\n  const updateChart = (id, newConfig) => {\r\n    setCharts((prev) =>\r\n      prev.map((c) => (c.id === id ? { ...c, ...newConfig } : c))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"2rem\", maxWidth: 1200, margin: \"auto\" }}>\r\n      <h2 style={{ marginBottom: \"1rem\" }}>Upload and Combine Data</h2>\r\n\r\n      <input type=\"file\" multiple onChange={handleFilesChange} />\r\n\r\n      <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"1rem\", marginTop: \"1rem\" }}>\r\n        {fileEntries.map((entry, idx) => (\r\n          <div\r\n            key={idx}\r\n            style={{\r\n              flex: \"1 1 300px\",\r\n              border: \"1px solid #ccc\",\r\n              borderRadius: 8,\r\n              padding: \"1rem\",\r\n              background: \"#f9f9f9\",\r\n            }}\r\n          >\r\n            <strong>{entry.file.name}</strong>\r\n            <div style={{ marginTop: \"0.5rem\" }}>\r\n              <label>File Type: </label>\r\n              <select\r\n                value={entry.fileType}\r\n                onChange={(e) => updateEntry(idx, \"fileType\", e.target.value)}\r\n              >\r\n                <option value=\"excel\">Excel</option>\r\n                <option value=\"csv\">CSV</option>\r\n              </select>\r\n            </div>\r\n\r\n            {entry.fileType === \"excel\" && entry.sheetNames.length > 0 && (\r\n              <>\r\n                <div style={{ marginTop: \"0.5rem\" }}>\r\n                  <label>Sheet: </label>\r\n                  <select\r\n                    value={entry.sheetIndex}\r\n                    onChange={(e) => updateEntry(idx, \"sheetIndex\", Number(e.target.value))}\r\n                  >\r\n                    {entry.sheetNames.map((name, i) => (\r\n                      <option key={i} value={i}>\r\n                        {name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div style={{ marginTop: \"0.5rem\" }}>\r\n                  <label>Range: </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={entry.range}\r\n                    onChange={(e) => updateEntry(idx, \"range\", e.target.value)}\r\n                  />\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {fileEntries.length > 0 && (\r\n        <button onClick={handleUpload} style={{ marginTop: \"1rem\", padding: \"0.5rem 1rem\" }}>\r\n          Upload and Merge\r\n        </button>\r\n      )}\r\n\r\n      {mergedData.length > 0 && (\r\n        <>\r\n          <div style={{ marginTop: \"1.5rem\" }}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={showDataPreview}\r\n                onChange={() => setShowDataPreview((prev) => !prev)}\r\n              />\r\n              &nbsp;Show Merged Data\r\n            </label>\r\n          </div>\r\n\r\n          {showDataPreview && (\r\n            <div style={{ overflowX: \"auto\", marginTop: \"1rem\" }}>\r\n              <table border=\"1\" cellPadding={5} style={{ borderCollapse: \"collapse\", width: \"100%\" }}>\r\n                <thead style={{ background: \"#eee\" }}>\r\n                  <tr>\r\n                    {Object.keys(mergedData[0] || {}).map((key) => (\r\n                      <th key={key}>{key}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {mergedData.map((row, i) => (\r\n                    <tr key={i}>\r\n                      {Object.values(row).map((val, j) => (\r\n                        <td key={j}>{val}</td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n\r\n          <div style={{ marginTop: \"2rem\" }}>\r\n            <h3>Charts</h3>\r\n            <button onClick={addChart} style={{ marginBottom: \"1rem\" }}>+ Add Chart</button>\r\n\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                gap: \"1rem\",\r\n              }}\r\n            >\r\n              {charts.map(({ id, title, xKey, yKey, drilldownKeys }) => (\r\n                <div\r\n                  key={id}\r\n                  style={{\r\n                    flex: \"1 1 350px\",\r\n                    border: \"1px solid #ccc\",\r\n                    borderRadius: 8,\r\n                    padding: \"1rem\",\r\n                    background: \"#fff\",\r\n                    position: \"relative\",\r\n                  }}\r\n                >\r\n                  <button\r\n                    onClick={() => removeChart(id)}\r\n                    style={{\r\n                      position: \"absolute\",\r\n                      top: 8,\r\n                      right: 8,\r\n                      background: \"transparent\",\r\n                      border: \"none\",\r\n                      fontSize: \"1.5rem\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    title=\"Remove chart\"\r\n                  >\r\n                    &times;\r\n                  </button>\r\n\r\n                  <ChartCreator\r\n                    data={mergedData}\r\n                    onSave={(newTitle) => updateChart(id, { title: newTitle })}\r\n                    chartTypeInitial=\"column\"\r\n                    titleInitial={title}\r\n                    xKeyInitial={xKey}\r\n                    yKeyInitial={yKey}\r\n                    drilldownKeysInitial={drilldownKeys}\r\n                    onChange={(newConfig) => updateChart(id, newConfig)}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AACvE,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMmB,iBAAiB,GAAG,MAAOC,CAAC,IAAK;IACrC,MAAMC,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACH,CAAC,CAACI,MAAM,CAACC,KAAK,CAAC;IAChD,MAAMC,UAAU,GAAG,EAAE;IAErB,KAAK,MAAMC,IAAI,IAAIN,aAAa,EAAE;MAChC,MAAMO,GAAG,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACpD,MAAMC,QAAQ,GAAGL,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG,OAAO;MAChD,IAAIM,UAAU,GAAG,EAAE;MAEnB,IAAID,QAAQ,KAAK,OAAO,EAAE;QACxB,IAAI;UACF,MAAME,GAAG,GAAG,MAAMhC,aAAa,CAACwB,IAAI,CAAC;UACrCO,UAAU,GAAGC,GAAG,CAACC,IAAI,CAACC,MAAM,IAAI,EAAE;QACpC,CAAC,CAAC,MAAM;UACNC,KAAK,CAAC,iCAAiCX,IAAI,CAACE,IAAI,EAAE,CAAC;QACrD;MACF;MAEAH,UAAU,CAACa,IAAI,CAAC;QACdZ,IAAI;QACJM,QAAQ;QACRO,UAAU,EAAE,CAAC;QACbC,KAAK,EAAE,QAAQ;QACfP;MACF,CAAC,CAAC;IACJ;IAEAtB,cAAc,CAACc,UAAU,CAAC;IAC1BZ,aAAa,CAAC,EAAE,CAAC;IACjBI,SAAS,CAAC,EAAE,CAAC;EACf,CAAC;EAED,MAAMwB,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC3CjC,cAAc,CAAEkC,IAAI,IAAK;MACvB,MAAMC,OAAO,GAAG,CAAC,GAAGD,IAAI,CAAC;MACzBC,OAAO,CAACJ,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGC,KAAK;MAC7B,OAAOE,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG,EAAE;IAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvC,WAAW,CAACwC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3C,MAAM;QAAEvB,IAAI;QAAEM,QAAQ;QAAEO,UAAU;QAAEC;MAAM,CAAC,GAAG9B,WAAW,CAACuC,CAAC,CAAC;MAC5D,IAAI;QACF,MAAMf,GAAG,GACPF,QAAQ,KAAK,OAAO,GAChB,MAAMhC,WAAW,CAAC0B,IAAI,EAAEa,UAAU,EAAEC,KAAK,CAAC,GAC1C,MAAMvC,SAAS,CAACyB,IAAI,CAAC;QAE3B,MAAMS,IAAI,GAAGD,GAAG,CAACC,IAAI;QAErB,IAAId,KAAK,CAAC8B,OAAO,CAAChB,IAAI,CAAC,EAAE;UACvB,MAAMiB,QAAQ,GAAGjB,IAAI,CAACkB,GAAG,CAAEC,GAAG,IAAK;YACjC,MAAMC,MAAM,GAAG,CAAC,CAAC;YACjB,KAAK,MAAM,CAACC,GAAG,EAAEZ,KAAK,CAAC,IAAIa,MAAM,CAACC,OAAO,CAACJ,GAAG,CAAC,EAAE;cAC9CC,MAAM,CAAC,IAAIN,CAAC,GAAG,CAAC,IAAIO,GAAG,EAAE,CAAC,GAAGZ,KAAK;YACpC;YACA,OAAOW,MAAM;UACf,CAAC,CAAC;UACFP,QAAQ,CAACV,IAAI,CAACc,QAAQ,CAAC;QACzB;MACF,CAAC,CAAC,MAAM;QACNf,KAAK,CAAC,qBAAqBX,IAAI,CAACE,IAAI,EAAE,CAAC;MACzC;IACF;IAEA,MAAM+B,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGb,QAAQ,CAACK,GAAG,CAAES,CAAC,IAAKA,CAAC,CAACZ,MAAM,CAAC,CAAC;IAC1D,MAAMa,MAAM,GAAG,EAAE;IAEjB,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,OAAO,EAAEV,CAAC,EAAE,EAAE;MAChC,MAAMK,GAAG,GAAG,CAAC,CAAC;MACd,KAAK,MAAMU,OAAO,IAAIhB,QAAQ,EAAE;QAC9B,MAAMiB,UAAU,GAAGD,OAAO,CAACf,CAAC,CAAC,IAAI,CAAC,CAAC;QACnCQ,MAAM,CAACS,MAAM,CAACZ,GAAG,EAAEW,UAAU,CAAC;MAChC;MACAF,MAAM,CAACzB,IAAI,CAACgB,GAAG,CAAC;IAClB;IAEAzC,aAAa,CAACkD,MAAM,CAAC;IACrBhD,kBAAkB,CAAC,IAAI,CAAC;IACxBE,SAAS,CAAC,CAAC;MAAEkD,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,SAAS;MAAEC,IAAI,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,aAAa,EAAE;IAAG,CAAC,CAAC,CAAC;EACjF,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrBvD,SAAS,CAAE4B,IAAI,IAAK,CAClB,GAAGA,IAAI,EACP;MAAEsB,EAAE,EAAEtB,IAAI,CAACK,MAAM,GAAG,CAAC;MAAEkB,KAAK,EAAE,SAASvB,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;MAAEmB,IAAI,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,aAAa,EAAE;IAAG,CAAC,CAClG,CAAC;EACJ,CAAC;EAED,MAAME,WAAW,GAAIN,EAAE,IAAK;IAC1BlD,SAAS,CAAE4B,IAAI,IAAKA,IAAI,CAAC6B,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACR,EAAE,KAAKA,EAAE,CAAC,CAAC;EACtD,CAAC;EAED,MAAMS,WAAW,GAAGA,CAACT,EAAE,EAAEU,SAAS,KAAK;IACrC5D,SAAS,CAAE4B,IAAI,IACbA,IAAI,CAACQ,GAAG,CAAEsB,CAAC,IAAMA,CAAC,CAACR,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGQ,CAAC;MAAE,GAAGE;IAAU,CAAC,GAAGF,CAAE,CAC5D,CAAC;EACH,CAAC;EAED,oBACEtE,OAAA;IAAKyE,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,QAAQ,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9D7E,OAAA;MAAIyE,KAAK,EAAE;QAAEK,YAAY,EAAE;MAAO,CAAE;MAAAD,QAAA,EAAC;IAAuB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEjElF,OAAA;MAAOmF,IAAI,EAAC,MAAM;MAACC,QAAQ;MAACC,QAAQ,EAAExE;IAAkB;MAAAkE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE3DlF,OAAA;MAAKyE,KAAK,EAAE;QAAEa,OAAO,EAAE,MAAM;QAAEC,QAAQ,EAAE,MAAM;QAAEC,GAAG,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAZ,QAAA,EAC/ExE,WAAW,CAAC2C,GAAG,CAAC,CAAC0C,KAAK,EAAEC,GAAG,kBAC1B3F,OAAA;QAEEyE,KAAK,EAAE;UACLmB,IAAI,EAAE,WAAW;UACjBC,MAAM,EAAE,gBAAgB;UACxBC,YAAY,EAAE,CAAC;UACfpB,OAAO,EAAE,MAAM;UACfqB,UAAU,EAAE;QACd,CAAE;QAAAlB,QAAA,gBAEF7E,OAAA;UAAA6E,QAAA,EAASa,KAAK,CAACrE,IAAI,CAACE;QAAI;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eAClClF,OAAA;UAAKyE,KAAK,EAAE;YAAEgB,SAAS,EAAE;UAAS,CAAE;UAAAZ,QAAA,gBAClC7E,OAAA;YAAA6E,QAAA,EAAO;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1BlF,OAAA;YACEuC,KAAK,EAAEmD,KAAK,CAAC/D,QAAS;YACtB0D,QAAQ,EAAGvE,CAAC,IAAKsB,WAAW,CAACuD,GAAG,EAAE,UAAU,EAAE7E,CAAC,CAACI,MAAM,CAACqB,KAAK,CAAE;YAAAsC,QAAA,gBAE9D7E,OAAA;cAAQuC,KAAK,EAAC,OAAO;cAAAsC,QAAA,EAAC;YAAK;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACpClF,OAAA;cAAQuC,KAAK,EAAC,KAAK;cAAAsC,QAAA,EAAC;YAAG;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,EAELQ,KAAK,CAAC/D,QAAQ,KAAK,OAAO,IAAI+D,KAAK,CAAC9D,UAAU,CAACiB,MAAM,GAAG,CAAC,iBACxD7C,OAAA,CAAAE,SAAA;UAAA2E,QAAA,gBACE7E,OAAA;YAAKyE,KAAK,EAAE;cAAEgB,SAAS,EAAE;YAAS,CAAE;YAAAZ,QAAA,gBAClC7E,OAAA;cAAA6E,QAAA,EAAO;YAAO;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtBlF,OAAA;cACEuC,KAAK,EAAEmD,KAAK,CAACxD,UAAW;cACxBmD,QAAQ,EAAGvE,CAAC,IAAKsB,WAAW,CAACuD,GAAG,EAAE,YAAY,EAAEK,MAAM,CAAClF,CAAC,CAACI,MAAM,CAACqB,KAAK,CAAC,CAAE;cAAAsC,QAAA,EAEvEa,KAAK,CAAC9D,UAAU,CAACoB,GAAG,CAAC,CAACzB,IAAI,EAAEqB,CAAC,kBAC5B5C,OAAA;gBAAgBuC,KAAK,EAAEK,CAAE;gBAAAiC,QAAA,EACtBtD;cAAI,GADMqB,CAAC;gBAAAmC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEN,CACT;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eAENlF,OAAA;YAAKyE,KAAK,EAAE;cAAEgB,SAAS,EAAE;YAAS,CAAE;YAAAZ,QAAA,gBAClC7E,OAAA;cAAA6E,QAAA,EAAO;YAAO;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtBlF,OAAA;cACEmF,IAAI,EAAC,MAAM;cACX5C,KAAK,EAAEmD,KAAK,CAACvD,KAAM;cACnBkD,QAAQ,EAAGvE,CAAC,IAAKsB,WAAW,CAACuD,GAAG,EAAE,OAAO,EAAE7E,CAAC,CAACI,MAAM,CAACqB,KAAK;YAAE;cAAAwC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA,eACN,CACH;MAAA,GA9CIS,GAAG;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA+CL,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAEL7E,WAAW,CAACwC,MAAM,GAAG,CAAC,iBACrB7C,OAAA;MAAQiG,OAAO,EAAEvD,YAAa;MAAC+B,KAAK,EAAE;QAAEgB,SAAS,EAAE,MAAM;QAAEf,OAAO,EAAE;MAAc,CAAE;MAAAG,QAAA,EAAC;IAErF;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT,EAEA3E,UAAU,CAACsC,MAAM,GAAG,CAAC,iBACpB7C,OAAA,CAAAE,SAAA;MAAA2E,QAAA,gBACE7E,OAAA;QAAKyE,KAAK,EAAE;UAAEgB,SAAS,EAAE;QAAS,CAAE;QAAAZ,QAAA,eAClC7E,OAAA;UAAA6E,QAAA,gBACE7E,OAAA;YACEmF,IAAI,EAAC,UAAU;YACfe,OAAO,EAAEzF,eAAgB;YACzB4E,QAAQ,EAAEA,CAAA,KAAM3E,kBAAkB,CAAE8B,IAAI,IAAK,CAACA,IAAI;UAAE;YAAAuC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrD,CAAC,wBAEJ;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,EAELzE,eAAe,iBACdT,OAAA;QAAKyE,KAAK,EAAE;UAAE0B,SAAS,EAAE,MAAM;UAAEV,SAAS,EAAE;QAAO,CAAE;QAAAZ,QAAA,eACnD7E,OAAA;UAAO6F,MAAM,EAAC,GAAG;UAACO,WAAW,EAAE,CAAE;UAAC3B,KAAK,EAAE;YAAE4B,cAAc,EAAE,UAAU;YAAEC,KAAK,EAAE;UAAO,CAAE;UAAAzB,QAAA,gBACrF7E,OAAA;YAAOyE,KAAK,EAAE;cAAEsB,UAAU,EAAE;YAAO,CAAE;YAAAlB,QAAA,eACnC7E,OAAA;cAAA6E,QAAA,EACGzB,MAAM,CAACmD,IAAI,CAAChG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAACyC,GAAG,CAAEG,GAAG,iBACxCnD,OAAA;gBAAA6E,QAAA,EAAe1B;cAAG,GAATA,GAAG;gBAAA4B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAW,CACxB;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACRlF,OAAA;YAAA6E,QAAA,EACGtE,UAAU,CAACyC,GAAG,CAAC,CAACC,GAAG,EAAEL,CAAC,kBACrB5C,OAAA;cAAA6E,QAAA,EACGzB,MAAM,CAACoD,MAAM,CAACvD,GAAG,CAAC,CAACD,GAAG,CAAC,CAACyD,GAAG,EAAEC,CAAC,kBAC7B1G,OAAA;gBAAA6E,QAAA,EAAa4B;cAAG,GAAPC,CAAC;gBAAA3B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAW,CACtB;YAAC,GAHKtC,CAAC;cAAAmC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAIN,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACN,eAEDlF,OAAA;QAAKyE,KAAK,EAAE;UAAEgB,SAAS,EAAE;QAAO,CAAE;QAAAZ,QAAA,gBAChC7E,OAAA;UAAA6E,QAAA,EAAI;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACflF,OAAA;UAAQiG,OAAO,EAAE9B,QAAS;UAACM,KAAK,EAAE;YAAEK,YAAY,EAAE;UAAO,CAAE;UAAAD,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAEhFlF,OAAA;UACEyE,KAAK,EAAE;YACLa,OAAO,EAAE,MAAM;YACfC,QAAQ,EAAE,MAAM;YAChBC,GAAG,EAAE;UACP,CAAE;UAAAX,QAAA,EAEDlE,MAAM,CAACqC,GAAG,CAAC,CAAC;YAAEc,EAAE;YAAEC,KAAK;YAAEC,IAAI;YAAEC,IAAI;YAAEC;UAAc,CAAC,kBACnDlE,OAAA;YAEEyE,KAAK,EAAE;cACLmB,IAAI,EAAE,WAAW;cACjBC,MAAM,EAAE,gBAAgB;cACxBC,YAAY,EAAE,CAAC;cACfpB,OAAO,EAAE,MAAM;cACfqB,UAAU,EAAE,MAAM;cAClBY,QAAQ,EAAE;YACZ,CAAE;YAAA9B,QAAA,gBAEF7E,OAAA;cACEiG,OAAO,EAAEA,CAAA,KAAM7B,WAAW,CAACN,EAAE,CAAE;cAC/BW,KAAK,EAAE;gBACLkC,QAAQ,EAAE,UAAU;gBACpBC,GAAG,EAAE,CAAC;gBACNC,KAAK,EAAE,CAAC;gBACRd,UAAU,EAAE,aAAa;gBACzBF,MAAM,EAAE,MAAM;gBACdiB,QAAQ,EAAE,QAAQ;gBAClBC,MAAM,EAAE;cACV,CAAE;cACFhD,KAAK,EAAC,cAAc;cAAAc,QAAA,EACrB;YAED;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAETlF,OAAA,CAACF,YAAY;cACXgC,IAAI,EAAEvB,UAAW;cACjByG,MAAM,EAAGC,QAAQ,IAAK1C,WAAW,CAACT,EAAE,EAAE;gBAAEC,KAAK,EAAEkD;cAAS,CAAC,CAAE;cAC3DC,gBAAgB,EAAC,QAAQ;cACzBC,YAAY,EAAEpD,KAAM;cACpBqD,WAAW,EAAEpD,IAAK;cAClBqD,WAAW,EAAEpD,IAAK;cAClBqD,oBAAoB,EAAEpD,aAAc;cACpCmB,QAAQ,EAAGb,SAAS,IAAKD,WAAW,CAACT,EAAE,EAAEU,SAAS;YAAE;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrD,CAAC;UAAA,GAnCGpB,EAAE;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAoCJ,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA,eACN,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9E,EAAA,CA3QuBD,YAAY;AAAAoH,EAAA,GAAZpH,YAAY;AAAA,IAAAoH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}